{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ConexionService = /*#__PURE__*/(() => {\n  class ConexionService {\n    constructor(http) {\n      this.http = http;\n      this.headers = new HttpHeaders(); //options = new RequestOptions();\n\n      this.options = {\n        headers: Headers\n      };\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'asda1234'\n      });\n    }\n\n    getQuery(query) {\n      // const url = `${environment.urlApi}${query}`;\n      const ruta = this.mapeaRuta(environment.urlApi);\n      const url = `${ruta}${query}`;\n      return this.http.get(url, {\n        headers: this.headers\n      });\n    }\n\n    getQueryPost(query) {\n      const ruta = this.mapeaRuta(environment.urlApi);\n      const url = `${ruta}${query}&sacr=asda1234`;\n      return this.http.post(url, this.options, {\n        headers: this.headers\n      });\n    }\n\n    getAuthPost(query) {\n      console.log(query);\n      const ruta = environment.urlApiAuth;\n      console.log(ruta);\n      const url = `${ruta}${query}`;\n      console.log(url);\n      return this.http.post(url, this.options, {\n        headers: this.headers\n      }).pipe(map(response => response));\n    }\n\n    getQueryPostObject(query, object) {\n      const ruta = this.mapeaRuta(environment.urlApi);\n      const url = `${ruta}${query}`;\n      return this.http.post(url, object, {\n        headers: this.headers\n      }).pipe(map(response => response));\n    }\n\n    getQueryPostObjectPromise(query, object) {\n      //const ruta = this.mapeaRuta(environment.urlApi);\n      const ruta = environment.urlApi;\n      const url = `${ruta}${query}`; //console.log('url',url);\n\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'asda1234'\n      }); //console.log(headers);\n\n      var promise = new Promise((resolve, reject) => {\n        this.http.post(url, object, {\n          headers\n        }).pipe(map(response => response)).subscribe(data => {\n          resolve(data);\n          reject(data);\n        });\n      });\n      return promise;\n    }\n\n    getQueryPutObjectPromise(query, object) {\n      //const ruta = this.mapeaRuta(environment.urlApi);\n      const ruta = environment.urlApi;\n      const url = `${ruta}${query}`;\n      console.log('*url', url);\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'asda1234'\n      });\n      var promise = new Promise((resolve, reject) => {\n        this.http.put(url, object, {\n          headers\n        }).pipe(map(response => response)).subscribe(data => {\n          resolve(data);\n          reject(data);\n        });\n      });\n      return promise;\n    }\n\n    getQueryDeleteObjectPromise(query, object) {\n      //const ruta = this.mapeaRuta(environment.urlApi);\n      const ruta = environment.urlApi;\n      let url = `${ruta}${query}`;\n      url = url + '/' + object;\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer asda1234'\n      });\n      var promise = new Promise((resolve, reject) => {\n        this.http.delete(url, {\n          headers\n        }).pipe(map(response => response)).subscribe(data => {\n          resolve(data);\n          reject(data);\n        });\n      });\n      return promise;\n    }\n\n    decodeJwt(token) {\n      const helper = new JwtHelperService();\n      const decodedToken = helper.tokenGetter();\n      console.log(decodedToken); // Other functions\n\n      const expirationDate = helper.getTokenExpirationDate(token);\n      console.log(expirationDate);\n      const isExpired = helper.isTokenExpired(token);\n      console.log(isExpired);\n      return decodedToken;\n    }\n\n    mapeaRuta(ruta) {\n      const header = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\";\n      const foot = \"eomGwcNBBqAtVPy2aQI9GntvzsnCY3PHmaLIKrxT4qM\";\n      let token = header + '.' + ruta + '.' + foot;\n      const helper = new JwtHelperService();\n      const hidden = \"eyJocyI6InBhbGFicmFhemFyIn0\";\n      token = token.replace(hidden, '');\n      const decodedToken = helper.decodeToken(token);\n      console.log(decodedToken);\n      return decodedToken['rt'];\n    }\n\n  }\n\n  ConexionService.ɵfac = function ConexionService_Factory(t) {\n    return new (t || ConexionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ConexionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConexionService,\n    factory: ConexionService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConexionService;\n})();","map":null,"metadata":{},"sourceType":"module"}